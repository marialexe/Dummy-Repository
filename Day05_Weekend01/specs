require 'minitest/autorun'
require_relative '../pet_shop'

class TestPetShop < Minitest::Test

  def setup

    @customers = [
      {
        name: "Craig",
        pets:[],
        cash: 1000
      },
      {
        name: "Zsolt",
        pets: [],
        cash: 50
      },
# the next 3 customers were added for further testing purposes
      {
        name: "Mark",
        pets: [:cat, :dog, :elephant, :zebra],
        cash: 1000
      },
      {
        name: "Phill",
        pets: [:fish,:cat],
        cash: 50
      },
      {
        name: "Paul",
        pets: [:tiger],
        cash: 50
      }
    ]

    @new_pet = {
            name: "Bors the Younger",
            pet_type: :cat,
            breed: "Cornish Rex",
            price: 100
          }

    @pet_shop = {
        pets: [
          {
            name: "Sir Percy",
            pet_type: :cat,
            breed: "British Shorthair",
            price: 500
          },
          {
            name: "King Bagdemagus",
            pet_type: :cat,
            breed: "British Shorthair",
            price: 500
          },
          {
            name: "Sir Lancelot",
            pet_type: :dog,
            breed: "Pomsky",
            price: 1000,
          },
          {
            name: "Arthur",
            pet_type: :dog,
            breed: "Husky",
            price: 900,
          },
          {
            name: "Tristan",
            pet_type: :dog,
            breed: "Basset Hound",
            price: 800,
          },
          {
            name: "Merlin",
            pet_type: :cat,
            breed: "Egyptian Mau",
            price: 1500,
          }
        ],
        admin: {
          total_cash: 1000,
          pets_sold: 0,
        },
        name: "Camelot of Pets"
      }
  end

#test no.1
  def test_pet_shop_name
    name = pet_shop_name(@pet_shop)
    assert_equal("Camelot of Pets", name)
  end

# extra tests => test no. 1 which produce errors to help with the TDD process
    # def test_pet_shop_name2
    #   name = pet_shop_name(@pet_shop)
    #   assert_equal(nil, name)
    # end

#test no.2
  def test_total_cash
    sum = total_cash(@pet_shop)
    assert_equal(1000, sum)
  end

# extra tests => test no.2 which produce errors to help with the TDD process
    # def test_total_cash2
    #   sum = total_cash(@pet_shop)
    #   assert_equal(2000, sum)
    # end

#test no.3
  def test_add_or_remove_cash__add
    add_or_remove_cash(@pet_shop,10)
    cash = total_cash(@pet_shop)
    assert_equal(1010, cash)
  end

# additional test => test no.3
  def test_add_or_remove_cash__add2
    add_or_remove_cash(@pet_shop,50)
    cash = total_cash(@pet_shop)
    assert_equal(1050, cash)
  end

#test no.4
  def test_add_or_remove_cash__remove
    add_or_remove_cash(@pet_shop,-10)
    cash = total_cash(@pet_shop)
    assert_equal(990, cash)
  end

#test no.5 
  def test_pets_sold
    sold = pets_sold(@pet_shop)
    assert_equal(0, sold)
  end

#test no.6
  def test_increase_pets_sold
    increase_pets_sold(@pet_shop,2)
    sold = pets_sold(@pet_shop)
    assert_equal(2, sold)
  end

# additional test => test no. 6
  def test_increase_pets_sold2
    increase_pets_sold(@pet_shop,10)
    sold = pets_sold(@pet_shop)
    assert_equal(10, sold)
  end

#test no.7
  def test_stock_count
    count = stock_count(@pet_shop)
    assert_equal(6, count)
  end

#test no.8
  def test_all_pets_by_breed__found
    pets = pets_by_breed(@pet_shop, "British Shorthair")
    assert_equal(2, pets.count)
  end

#test no.9
  def test_all_pets_by_breed__not_found
    pets = pets_by_breed(@pet_shop, "Dalmation")
    assert_equal(0, pets.count)
  end

#test no.10
  def test_find_pet_by_name__returns_pet
    pet = find_pet_by_name(@pet_shop, "Arthur")
    assert_equal("Arthur", pet[:name])
  end

#test no.11
  def test_find_pet_by_name__returns_nil
    pet = find_pet_by_name(@pet_shop, "Fred")
    assert_equal(nil, pet)
  end

#test no.12
  def test_remove_pet_by_name
    remove_pet_by_name(@pet_shop, "Arthur")
    pet = find_pet_by_name(@pet_shop,"Arthur")
    assert_equal(nil, pet)
  end

#test no.13
  def test_add_pet_to_stock
    add_pet_to_stock(@pet_shop, @new_pet)
    count = stock_count(@pet_shop)
    assert_equal(7, count)
  end

#test no.14
  def test_customer_pet_count
    count = customer_pet_count(@customers[0])
    assert_equal(0, count)
  end

# additional tests => test 14
    def test_customer_pet_count
      count = customer_pet_count(@customers[2])
      assert_equal(4, count)
    end

  def test_customer_pet_count
    count = customer_pet_count(@customers[3])
    assert_equal(2, count)
  end

#test no.15
  def test_add_pet_to_customer
    customer = @customers[0]
    add_pet_to_customer(customer, @new_pet)
    assert_equal(1, customer_pet_count(customer))
  end

  # # OPTIONAL

#test no.16
  def test_customer_can_afford_pet__insufficient_funds
    customer = @customers[1]
    can_buy_pet = customer_can_afford_pet(customer, @new_pet)
    assert_equal(false, can_buy_pet)
  end

#test no.17
  def test_customer_can_afford_pet__sufficient_funds
    customer = @customers[0]
    can_buy_pet = customer_can_afford_pet(customer, @new_pet)
    assert_equal(true, can_buy_pet)
  end


  #These are 'integration' tests so we want multiple asserts.
  #If one fails the entire test should fail

#test no.18
def test_sell_pet_to_customer__pet_found
  customer = @customers[0]
  pet = find_pet_by_name(@pet_shop,"Arthur")

  sell_pet_to_customer(@pet_shop, pet, customer)

  assert_equal(1, customer_pet_count(customer))
  assert_equal(1, pets_sold(@pet_shop))
  # assert_equal(1900, total_cash(@pet_shop))
end

#test no.19
  # def test_sell_pet_to_customer__pet_not_found
  #   customer = @customers[0]
  #   pet = find_pet_by_name(@pet_shop,"Dave")

  #   sell_pet_to_customer(@pet_shop, pet, customer)

  #   assert_equal(0, customer_pet_count(customer))
  #   assert_equal(0, pets_sold(@pet_shop))
  #   assert_equal(1000, total_cash(@pet_shop))
  # end

#test no.20
  # def test_sell_pet_to_customer__insufficient_funds
  #   customer = @customers[1]
  #   pet = find_pet_by_name(@pet_shop,"Arthur")

  #   sell_pet_to_customer(@pet_shop, pet, customer)

  #   assert_equal(0, customer_pet_count(customer))
  #   assert_equal(0, pets_sold(@pet_shop))
  #   assert_equal(1000, total_cash(@pet_shop))
  # end

  #   def test_sell_pet_to_customer__pet_found
  #     customer = @customers[0]
  #     pet = find_pet_by_name(@pet_shop,"Arthur")
  #     affordable = customer_can_afford_pet(customer,@new_pet)
  #     count=customer_pet_count(customer)
  #     sold=sell_pet_to_customer(@pet_shop, pet, customer)
  # #test no.19    
  # # sell_pet_to_customer(@pet_shop, pet, customer)
      
  #     assert_equal("Arthur", pet[:name])
  #     assert_equal(true, affordable)
  #     assert_equal(1, count)
  #     assert_equal(true, sold)
  #   end

end
